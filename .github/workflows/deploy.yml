#
# Github Actions for Serverless Framework
#
# Create AWS_KEY and AWS_SECRET secrets in GitHub repository settings
# If you're using env.yml file, store its content as ENV Github secret
#
# Master branch will be deployed as DEV and every new tag starting with "v**" (e.g. v1.0, v1.2, v2.0, etc) will be deployed as PROD
#
# Learn more: https://maxkostinevich.com/blog/how-to-deploy-serverless-applications-using-github-actions/
#

name: Deploy Dev

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.ref_name }}
      APP_NAME: ${{github.event.repository.name}}
      OWNER: ${{github.repository_owner}}
      API_DIR: apps/api

      DB_NAME: breaflearn2
      USERNAME: master
      PASSWORD: password
    steps:
      - name: Check out repository
        uses: actions/checkout@v1
      - name: Set up node
        uses: actions/setup-node@v1
        with:
          node-version: '14'

      - name: Setup PHP with composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: composer:v2.2

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Install NPM dependencies
        run: npm install

      - name: Serverless AWS authentication
        run: sls config credentials --provider aws --key ${{ secrets.AWS_KEY }} --secret ${{ secrets.AWS_SECRET }}

      - name: Build Backend Infrastructure
        run: |
          sls deploy --config serverless.preBuild.yml --verbose

      - name: Get outputs from the stack just created
        id: get-outputs
        run: >-
          echo "DBENDPOINT=$(
                aws cloudformation describe-stacks \
                --stack-name bref-learn-api-preBuild-dev \
                --profile=personal-profile \
                --region=eu-west-2 --query "Stacks[0].Outputs[0].OutputValue"
          )" >> $GITHUB_OUTPUT

      - name: Install NPM dependencies
        run: npm install

      - name: Build backend
        run: |
          make ci-build

      - name: Deploy Lambda functions
        run: echo "FOO=$(sls deploy | grep endpoint)" >> $GITHUB_ENV

      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: |
            Build created with output:
            ${{ env.FOO }} 
            pgEndpoint: 
            ${{ steps.get-db-output.outputs.DBENDPOINT }}