app: '${env:APP_NAME}'
service: '${env:APP_NAME}-api-preBuild'
useDotenv: true

provider:
  name: aws
  stage: dev
  region: eu-west-2
  runtime: provided.al2

plugins:
  - ./vendor/bref/bref
  - serverless-pseudo-parameters
functions:
  api:
    handler: apps/api/public/index.php
    description: ''
    timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
    layers:
      - ${bref:layer.php-74-fpm}
    events:
      - httpApi: '*'

# For a pgDB inside a VPC look e.g. here:
# http://www.stojanveselinovski.com/blog/2016/01/12/simple-postgresql-rds-cloudformation-template/
resources:
  Resources:
    pgSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Access to Postgres
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '5432'
            ToPort: '5432'
            CidrIp: 0.0.0.0/0

    pgDB:
      Type: "AWS::RDS::DBInstance"
      Properties:
        DBName: ${env:DB_NAME}
        AllocatedStorage: 5
        DBInstanceClass: "db.t2.micro"
        Engine: "postgres"
        EngineVersion: "9.5.4"
        MasterUsername: "example"
        MasterUserPassword: "serverless"
        VPCSecurityGroups:
          - Fn::GetAtt:
              - pgSecurityGroup
              - GroupId
        Tags:
          -
            Key: "Name"
            Value: "forum_example"
      DeletionPolicy: "Snapshot"
  Outputs:
    pgEndpoint:
      Description: "JDBC connection string for database"
      Value:
        Fn::GetAtt:
          - pgDB
          - Endpoint.Address
# Exclude files from deployment
package:
  patterns:
    - '!node_modules/**'
    - '!tests/**'
